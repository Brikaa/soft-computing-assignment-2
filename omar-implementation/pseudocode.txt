- Non-uniform mutation:
  - delta = y * (1 - r ^ (1 - t/T)^b)
          = allowed_value_for_change * (1 - (random_number ^ (1 - current_gen/max_gen)) ^ dependency_factor)
  - current_gen increases ->  (1 - current_gen/max_gen) decreases
                          ->  (random_number ^ (1 - current_gen/max_gen)) increases
                          ->  (random_number ^ (1 - current_gen/max_gen)) ^ dependency_factor increases (#)
                          ->  (1 - (random_number ^ (1 - current_gen/max_gen)) ^ dependency_factor) decreases
                          ->  allowed_value_for_change * (1 - (random_number ^ (1
                          - current_gen/max_gen)) ^ dependency_factor) decreases
  - dependency_factor increases -> (#) increases -> sharper decrease by increasing current_gen


- k = 0.95 * popSize
- Elitism replacement
  - (popSize - k) elites
  - Put them in next generation which would be k individuals

- Tournament selection
  - Need k individuals
  - Run k tournaments

- tournamentSelection(fitnessFn, noTournaments, population)
  - selected = []
  - 1..noTournaments
    - r1 = rand(0..len(population))
    - r2 = r1
    - while r2 == r1:
      - r2 = rand(0..len(population))
    - first = population[r1]
    - second = population[r2]
    - best = fitnessFn(first) > fitnessFn(seconds) ? first : second
    - selected.append(best)
